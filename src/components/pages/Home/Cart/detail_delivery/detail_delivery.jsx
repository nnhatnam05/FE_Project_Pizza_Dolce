import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import './detail_delivery.css';

const statusSteps = [
    { status: 'PREPARING', label: 'ƒêang chu·∫©n b·ªã', icon: '‚è≥' },
    { status: 'WAITING_FOR_SHIPPER', label: 'Ch·ªù shipper', icon: 'üë§' },
    { status: 'DELIVERING', label: 'ƒêang giao', icon: 'üöö' },
    { status: 'DELIVERED', label: 'ƒê√£ giao', icon: '‚úÖ' }
];

const DetailDelivery = () => {
    const { orderId } = useParams();
    const navigate = useNavigate();
    const [order, setOrder] = useState(null);
    const [deliveryStatus, setDeliveryStatus] = useState(null);
    const [previousStatus, setPreviousStatus] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [currentStep, setCurrentStep] = useState(0);
    const [showStatusDetails, setShowStatusDetails] = useState(false);
    const [showRatingModal, setShowRatingModal] = useState(false);
    const [showCompletionModal, setShowCompletionModal] = useState(false);
    const [showConfetti, setShowConfetti] = useState(false);
    const [rating, setRating] = useState(5);
    const [ratingComment, setRatingComment] = useState('');
    const [ratingSubmitting, setRatingSubmitting] = useState(false);
    const [showNotification, setShowNotification] = useState(false);
    const [notificationMessage, setNotificationMessage] = useState('');
    const [apiError, setApiError] = useState(null);
    const notificationTimeoutRef = useRef(null);

    // Fetch order information
    const fetchOrder = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) {
            setError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng');
            navigate('/login/customer');
            return;
        }
        try {
            const res = await axios.get(`http://localhost:8080/api/orders/${orderId}`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            console.log("Order data:", res.data);
            setOrder(res.data);
            return res.data;
        } catch (err) {
            console.error("Error fetching order:", err);
            setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng');
            return null;
        }
    }, [orderId, navigate]);

    // Fetch delivery status
    const fetchDeliveryStatus = useCallback(async () => {
        const token = localStorage.getItem('token');
        if (!token) return null;
        
        try {
            const res = await axios.get(`http://localhost:8080/api/orders/my/${orderId}/delivery-status`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            if (res.data && (!res.data.deliveryStatus || res.data.deliveryStatus === '') && res.data.statusHistory && res.data.statusHistory.length > 0) {
                const lastStatus = res.data.statusHistory[res.data.statusHistory.length - 1];
                res.data.deliveryStatus = lastStatus.status;
            }
            
            setPreviousStatus(res.data?.deliveryStatus);
            setDeliveryStatus(res.data);
            setApiError(null);
            return res.data;
        } catch (err) {
            setDeliveryStatus(null);
            setApiError(err.message || "Kh√¥ng th·ªÉ t·∫£i tr·∫°ng th√°i giao h√†ng");
            return null;
        }
    }, [orderId]);

    // Init and refresh
    useEffect(() => {
        const initializeData = async () => {
            setLoading(true);
            await fetchOrder();
            const status = await fetchDeliveryStatus();
            
            if (status) {
                setPreviousStatus(status.deliveryStatus);
                if (status.deliveryStatus === 'DELIVERED') {
                    setShowCompletionModal(true);
                }
                if (status.deliveryStatus === 'PAID') {
                    showStatusChangeNotification('Thanh to√°n th√†nh c√¥ng!');
                }
            }
            
            setLoading(false);
        };

        initializeData();

        // Refresh m·ªói 10 gi√¢y
        const refreshInterval = setInterval(() => {
            fetchDeliveryStatus().then(status => {
                if (status && status.deliveryStatus === 'DELIVERED' && !showCompletionModal) {
                    setShowCompletionModal(true);
                }
            });
        }, 10000);

        return () => clearInterval(refreshInterval);
    }, [showCompletionModal]);

    useEffect(() => {
        if (deliveryStatus && deliveryStatus.deliveryStatus) {
            let statusToCheck = deliveryStatus.deliveryStatus;
            if (statusToCheck === 'PAID') {
                statusToCheck = 'CONFIRMED';
            }
            
            const stepIndex = statusSteps.findIndex(step => step.status === statusToCheck);
            if (stepIndex !== -1) {
                setCurrentStep(stepIndex);
            }
        }
    }, [deliveryStatus]);

    // X·ª≠ l√Ω thay ƒë·ªïi tr·∫°ng th√°i
    useEffect(() => {
        if (deliveryStatus && deliveryStatus.deliveryStatus && previousStatus) {
            if (deliveryStatus.deliveryStatus !== previousStatus) {
                let newStatusLabel;
                if (deliveryStatus.deliveryStatus === 'PAID') {
                    newStatusLabel = 'ƒê√£ thanh to√°n';
                } else {
                    newStatusLabel = statusSteps.find(step => step.status === deliveryStatus.deliveryStatus)?.label || deliveryStatus.deliveryStatus;
                }
                showStatusChangeNotification(`Tr·∫°ng th√°i ƒë√£ thay ƒë·ªïi: ${newStatusLabel}`);
                
                if (deliveryStatus.deliveryStatus === 'DELIVERED') {
                    setShowCompletionModal(true);
                    setShowConfetti(true);
                    setTimeout(() => setShowConfetti(false), 5000);
                }
            }
        }
    }, [deliveryStatus, previousStatus]);

    // Hi·ªÉn th·ªã th√¥ng b√°o
    const showStatusChangeNotification = (message) => {
        if (notificationTimeoutRef.current) {
            clearTimeout(notificationTimeoutRef.current);
        }
        
        setNotificationMessage(message);
        setShowNotification(true);
        
        notificationTimeoutRef.current = setTimeout(() => {
            setShowNotification(false);
        }, 5000);
    };

    // G·ª≠i ƒë√°nh gi√°
    const submitRating = async () => {
        if (ratingSubmitting) return;

        setRatingSubmitting(true);
        try {
            setTimeout(() => {
                setRatingSubmitting(false);
                setShowRatingModal(false);
                setShowCompletionModal(false);
                alert('C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!');
            }, 1000);
        } catch (error) {
            setRatingSubmitting(false);
            alert('Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    // Render l·ªãch s·ª≠ tr·∫°ng th√°i
    const renderStatusHistory = () => {
        if (!showStatusDetails || !deliveryStatus) {
            return null;
        }

        return (
            <div className="status-history-container" onClick={(e) => e.stopPropagation()}>
                <div className="status-history-header">
                    <h3>L·ªãch s·ª≠ tr·∫°ng th√°i</h3>
                    <button className="close-history" onClick={() => setShowStatusDetails(false)}>√ó</button>
                </div>
                <div className="status-history-list">
                    {!deliveryStatus.statusHistory || deliveryStatus.statusHistory.length === 0 ? (
                        <div className="history-item">
                            <div className="history-status">
                                {deliveryStatus.deliveryStatus === 'PAID' ? 'ƒê√£ thanh to√°n' : deliveryStatus.deliveryStatus}
                            </div>
                            <div className="history-time">Tr·∫°ng th√°i hi·ªán t·∫°i</div>
                            <div className="history-note">Kh√¥ng c√≥ l·ªãch s·ª≠ b·ªï sung</div>
                        </div>
                    ) : (
                        deliveryStatus.statusHistory.map((item, idx) => (
                            <div key={idx} className="history-item">
                                <div className="history-status">
                                    {item.status === 'PAID' ? 'ƒê√£ thanh to√°n' : item.status}
                                </div>
                                <div className="history-time">{new Date(item.changedAt).toLocaleString('vi-VN')}</div>
                                <div className="history-note">{item.note || '(Kh√¥ng c√≥ ghi ch√∫)'}</div>
                            </div>
                        ))
                    )}
                </div>
            </div>
        );
    };

    // Render danh s√°ch m√≥n ƒÉn
    const renderOrderItems = () => {
        if (!order || !order.foodList || order.foodList.length === 0) {
            return <p style={{padding: '20px', textAlign: 'center', color: '#6c757d'}}>Kh√¥ng c√≥ m√≥n ƒÉn trong ƒë∆°n h√†ng n√†y</p>;
        }

        return (
            <div className="order-items-section">
                <table className="order-items-table">
                    <thead>
                        <tr>
                            <th>M√≥n ƒÉn</th>
                            <th>Gi√°</th>
                            <th>S·ªë l∆∞·ª£ng</th>
                            <th>T·ªïng</th>
                        </tr>
                    </thead>
                    <tbody>
                        {order.foodList.map(item => (
                            <tr key={item.id}>
                                <td className="item-name-cell">{item.name || 'Kh√¥ng c√≥ t√™n'}</td>
                                <td className="item-price-cell">{Number(item.price).toLocaleString()} $</td>
                                <td className="item-quantity-cell">{item.quantity}</td>
                                <td className="item-total-cell">{Number(item.price * item.quantity).toLocaleString()} $</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
                <div className="order-total">
                    <span>T·ªïng c·ªông:</span>
                    <span>{Number(order.totalPrice).toLocaleString()} $</span>
                </div>
            </div>
        );
    };

    // Render form ƒë√°nh gi√°
    const renderRatingForm = () => {
        return (
            <div className="rating-form">
                <h3>B·∫°n ƒë√°nh gi√° ƒë∆°n h√†ng n√†y nh∆∞ th·∫ø n√†o?</h3>
                <div className="rating-stars">
                    {[1, 2, 3, 4, 5].map(star => (
                        <span
                            key={star}
                            className={`star ${star <= rating ? 'active' : ''}`}
                            onClick={() => setRating(star)}
                        >
                            ‚òÖ
                        </span>
                    ))}
                </div>
                <textarea
                    className="rating-comment"
                    placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n..."
                    value={ratingComment}
                    onChange={(e) => setRatingComment(e.target.value)}
                    rows={3}
                />
                <div className="modal-actions">
                    <button
                        className="modal-btn primary"
                        onClick={submitRating}
                        disabled={ratingSubmitting}
                    >
                        {ratingSubmitting ? 'ƒêang g·ª≠i...' : 'G·ª≠i ƒë√°nh gi√°'}
                    </button>
                </div>
            </div>
        );
    };

    // Render modal ch√∫c m·ª´ng ho√†n th√†nh
    const renderCompletionModal = () => {
        if (!showCompletionModal) return null;

        return (
            <div className="completion-modal-content">
                <div className="completion-header">
                    <div className="completion-icon">üéâ</div>
                    <h2 className="completion-title">ƒê∆°n h√†ng ƒë√£ giao th√†nh c√¥ng!</h2>
                </div>
                
                <div className="completion-body">
                    <div className="success-animation">
                        <div className="checkmark-circle">
                            <div className="checkmark"></div>
                        </div>
                    </div>
                    
                    <div className="completion-message">
                        <h3>Ch√∫c m·ª´ng b·∫°n! üéä</h3>
                        <p>ƒê∆°n h√†ng #{order?.orderNumber || order?.id} ƒë√£ ƒë∆∞·ª£c giao ƒë·∫øn t·∫≠n tay b·∫°n.</p>
                        <p className="bon-appetit">Th∆∞·ªüng th·ª©c b·ªØa ƒÉn ngon mi·ªáng! Bon App√©tit! üçΩÔ∏è</p>
                    </div>
                    
                    <div className="completion-actions">
                        <button 
                            className="continue-shopping-btn"
                            onClick={() => {
                                setShowCompletionModal(false);
                                navigate('/');
                            }}
                        >
                            <span className="btn-icon">üõí</span>
                            Ti·∫øp t·ª•c mua s·∫Øm
                        </button>
                        <button 
                            className="close-modal-btn"
                            onClick={() => {
                                setShowCompletionModal(false);
                                navigate(`/payment-details/${orderId}`);
                            }}
                        >
                            <span className="btn-icon">‚úï</span>
                            ƒê√≥ng
                        </button>
                    </div>
                </div>
            </div>
        );
    };

    // Component th√¥ng b√°o
    const renderNotification = () => {
        if (!showNotification) return null;

        return (
            <div className="status-notification">
                <span className="notification-icon">üîî</span>
                <span className="notification-message">{notificationMessage}</span>
                <button 
                    className="notification-close"
                    onClick={() => setShowNotification(false)}
                >
                    √ó
                </button>
            </div>
        );
    };

    // Component confetti
    const renderConfetti = () => {
        if (!showConfetti) return null;

        return (
            <div className="confetti-container">
                {[...Array(30)].map((_, i) => (
                    <div
                        key={i}
                        className="confetti-piece"
                        style={{
                            left: `${Math.random() * 100}%`,
                            animationDelay: `${Math.random() * 3}s`,
                            animationDuration: `${3 + Math.random() * 2}s`
                        }}
                    >
                        {['üéâ', 'üéä', '‚ú®', 'üåü', 'üí´'][Math.floor(Math.random() * 5)]}
                    </div>
                ))}
            </div>
        );
    };

    if (loading) return <div className="delivery-loading">ƒêang t·∫£i...</div>;
    if (error) return <div className="delivery-error">{error}</div>;

    // L·∫•y tag tr·∫°ng th√°i ƒë∆°n h√†ng
    const getStatusTag = (status) => {
        switch (status) {
            case 'WAITING_PAYMENT': return <span className="status-tag waiting_payment">Ch·ªù thanh to√°n</span>;
            case 'PAID': return <span className="status-tag paid">ƒê√£ thanh to√°n</span>;
            case 'CONFIRMED': return <span className="status-tag confirmed">ƒê√£ x√°c nh·∫≠n</span>;
            case 'PREPARING': return <span className="status-tag preparing">ƒêang chu·∫©n b·ªã</span>;
            case 'DELIVERING': return <span className="status-tag delivering">ƒêang giao</span>;
            case 'COMPLETED': return <span className="status-tag completed">Ho√†n th√†nh</span>;
            case 'CANCELLED': return <span className="status-tag cancelled">ƒê√£ h·ªßy</span>;
            default: return <span className="status-tag">{status}</span>;
        }
    };

    return (
        <div className="delivery-page-container">
            {renderConfetti()}
            {renderNotification()}
            
            {showStatusDetails && (
                <div className="modal-overlay" onClick={() => setShowStatusDetails(false)}>
                    {renderStatusHistory()}
                </div>
            )}
            
            <div className="breadcrumb">
                <span onClick={() => navigate('/')}>Trang ch·ªß</span>
                <span>‚Ä¢</span>
                <span onClick={() => navigate('/order-history')}>L·ªãch s·ª≠ ƒë∆°n h√†ng</span>
                <span>‚Ä¢</span>
                <span>ƒê∆°n h√†ng #{order?.id}</span>
            </div>
            
            <h1 className="page-title">Chi ti·∫øt ƒë∆°n h√†ng</h1>
            
            <div className="delivery-content">
                {/* C·ªôt tr√°i - Danh s√°ch m√≥n ƒÉn v√† Th√¥ng tin kh√°ch h√†ng */}
                <div style={{display: 'flex', flexDirection: 'column', gap: 16, flex: 1}}>
                    <div className="content-section order-details-section">
                        <h2 className="section-title">Danh s√°ch m√≥n ƒÉn</h2>
                        {renderOrderItems()}
                    </div>
                    {/* Th√¥ng tin kh√°ch h√†ng */}
                    <div className="content-section customer-info-section">
                        <h2 className="section-title">Th√¥ng tin kh√°ch h√†ng</h2>
                        <div className="info-card">
                            <div className="info-item">
                                <div className="info-label">T√™n:</div>
                                <div className="info-value">{order?.customer?.name || order?.customer?.fullName || 'Kh√¥ng c√≥ t√™n'}</div>
                            </div>
                            <div className="info-item">
                                <div className="info-label">S·ªë ƒëi·ªán tho·∫°i:</div>
                                <div className="info-value">{order?.customer?.phoneNumber || order?.phoneNumber || 'Kh√¥ng c√≥'}</div>
                            </div>
                            <div className="info-item">
                                <div className="info-label">ƒê·ªãa ch·ªâ:</div>
                                <div className="info-value">{order?.customer?.address || order?.shippingAddress || order?.address || 'Kh√¥ng c√≥'}</div>
                            </div>
                            {(order?.customer?.email || order?.email) && (
                                <div className="info-item">
                                    <div className="info-label">Email:</div>
                                    <div className="info-value">{order?.customer?.email || order?.email}</div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                {/* C·ªôt ph·∫£i - Tr·∫°ng th√°i v√† t√≥m t·∫Øt ƒë∆°n h√†ng */}
                <div className="right-column">
                    {/* Card tr·∫°ng th√°i giao h√†ng */}
                    <div className="content-section delivery-status-section">
                        <h2 className="section-title">Tr·∫°ng th√°i giao h√†ng</h2>
                        <div className="delivery-status-card">
                            <div className="current-status-header">
                                <span className="current-status-label">Tr·∫°ng th√°i hi·ªán t·∫°i:</span>
                                <span className="current-status-value">
                                    {(() => {
                                        if (!deliveryStatus) {
                                            return 'ƒêang t·∫£i...';
                                        }
                                        if (deliveryStatus.deliveryStatus === 'PAID') {
                                            return 'ƒê√£ thanh to√°n';
                                        } else {
                                            const currentStatusIndex = statusSteps.findIndex(s => s.status === deliveryStatus.deliveryStatus);
                                            return currentStatusIndex !== -1 ? statusSteps[currentStatusIndex].label : deliveryStatus.deliveryStatus || 'Kh√¥ng x√°c ƒë·ªãnh';
                                        }
                                    })()}
                                </span>
                            </div>
                            
                            {apiError && (
                                <div style={{
                                    fontSize: '12px', 
                                    color: '#dc3545', 
                                    marginBottom: '8px', 
                                    padding: '6px 8px', 
                                    backgroundColor: '#f8d7da', 
                                    borderRadius: '4px',
                                    border: '1px solid #f5c6cb'
                                }}>
                                    C√≥ l·ªói x·∫£y ra vui l√≤ng t·∫£i l·∫°i trang!
                                </div>
                            )}
                            
                            {/* Progress bar */}
                            <div className="delivery-progress-container">
                                <div className="progress-bar">
                                    <div
                                        className="progress-fill"
                                        style={{ 
                                            width: `${(() => {
                                                if (deliveryStatus?.deliveryStatus === 'PAID') {
                                                    return (1 / (statusSteps.length - 1)) * 100;
                                                } else {
                                                    const currentStatusIndex = statusSteps.findIndex(s => s.status === deliveryStatus?.deliveryStatus);
                                                    return currentStatusIndex !== -1 ? (currentStatusIndex / (statusSteps.length - 1)) * 100 : 0;
                                                }
                                            })()}%` 
                                        }}
                                    ></div>
                                </div>
                                <div className="progress-steps">
                                    {statusSteps.map((step, index) => {
                                        let isActive = false;
                                        let isCurrent = false;
                                        
                                        if (deliveryStatus?.deliveryStatus === 'PAID') {
                                            isActive = index <= 0;
                                            isCurrent = index === 0;
                                        } else {
                                            const currentStatusIndex = statusSteps.findIndex(s => s.status === deliveryStatus?.deliveryStatus);
                                            
                                            if (currentStatusIndex !== -1) {
                                                isActive = index <= currentStatusIndex;
                                                isCurrent = index === currentStatusIndex;
                                            }
                                        }
                                        
                                        return (
                                            <div
                                                key={index}
                                                className={`progress-step ${isActive ? 'active' : ''} ${isCurrent ? 'current' : ''}`}
                                                onClick={() => setShowStatusDetails(true)}
                                                title="Xem l·ªãch s·ª≠ tr·∫°ng th√°i"
                                            >
                                                <div className="step-icon">{step.icon}</div>
                                                <div className="step-label">{step.label}</div>
                                            </div>
                                        );
                                    })}
                                </div>
                            </div>
                            
                            <div className="status-actions">
                                <button 
                                    className="history-button"
                                    onClick={() => setShowStatusDetails(true)}
                                >
                                    Xem l·ªãch s·ª≠
                                </button>
                                {deliveryStatus?.deliveryStatus === 'DELIVERED' && (
                                    <button 
                                        className="rating-button"
                                        onClick={() => setShowRatingModal(true)}
                                    >
                                        ƒê√°nh gi√°
                                    </button>
                                )}
                            </div>
                        </div>
                    </div>
                    
                    {/* Card t√≥m t·∫Øt ƒë∆°n h√†ng */}
                    <div className="content-section order-summary-section">
                        <h2 className="section-title">T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
                        <div className="summary-card">
                            <div className="summary-item">
                                <div className="summary-label">M√£ ƒë∆°n h√†ng:</div>
                                <div className="summary-value">#{order?.orderNumber || order?.id}</div>
                            </div>
                            <div className="summary-item">
                                <div className="summary-label">Ng√†y ƒë·∫∑t:</div>
                                <div className="summary-value">{new Date(order?.createdAt).toLocaleString('vi-VN')}</div>
                            </div>
                            {/* <div className="summary-item">
                                <div className="summary-label">Tr·∫°ng th√°i:</div>
                                <div className="summary-value">{getStatusTag(order?.status)}</div>
                            </div> */}
                            {order?.paymentMethod && (
                                <div className="summary-item">
                                    <div className="summary-label">Ph∆∞∆°ng th·ª©c thanh to√°n:</div>
                                    <div className="summary-value">{order.paymentMethod.name}</div>
                                </div>
                            )}
                            
                            <div className="summary-divider"></div>
                            
                            {/* <div className="summary-total">
                                <div className="summary-label">T·ªïng c·ªông:</div>
                                <div className="summary-value total-value">${Number(order?.totalPrice).toLocaleString()}</div>
                            </div> */}
                            
                            <div className="summary-actions">
                                <button
                                    className="back-btn"
                                    onClick={() => navigate('/order-history')}
                                >
                                    Quay l·∫°i
                                </button>
                                <button
                                    className="home-btn"
                                    onClick={() => navigate('/')}
                                >
                                    Trang ch·ªß
                                </button>
                            </div>
                        </div>
                        
                        {/* Ghi ch√∫ ƒë∆°n h√†ng */}
                        {order?.note && (
                            <div className="note-card">
                                <h3 className="note-title">Ghi ch√∫ ƒë∆°n h√†ng</h3>
                                <p className="note-content">{order.note}</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Modal ƒë√°nh gi√° */}
            {showRatingModal && (
                <div className="modal-overlay" onClick={() => setShowRatingModal(false)}>
                    <div className="modal-container" onClick={(e) => e.stopPropagation()}>
                        <div className="modal-header">
                            <h3>ƒê√°nh gi√° ƒë∆°n h√†ng</h3>
                            <button className="modal-close" onClick={() => setShowRatingModal(false)}>√ó</button>
                        </div>
                        <div className="modal-content">
                            {renderRatingForm()}
                        </div>
                    </div>
                </div>
            )}
            
            {/* Modal ch√∫c m·ª´ng ho√†n th√†nh */}
            {showCompletionModal && (
                <div className="completion-modal-overlay" onClick={() => setShowCompletionModal(false)}>
                    <div className="completion-modal-container" onClick={(e) => e.stopPropagation()}>
                        {renderCompletionModal()}
                    </div>
                </div>
            )}
        </div>
    );
};

export default DetailDelivery;
